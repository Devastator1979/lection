//Полиморфизм
//Без наследования полиморфизм построить нельзя. Также необходимо наличие
// переопределение методов.
//Метод который с одинаковым заголовком который присутсвует в класе родителе и вкласе наследнике и разное тело у методов.
// 1. Нужна иерархия и переопределенный метод.
// 2. Создать объект наследника и переменную родительского типа.
// 3. Через переменную родительского типа вызвать метод который мы называем переопределенным.
// Только для объектных методов имеет смысл применять переопределение. Для методов Static не работает.
// Модифакатор доступа должен совпадать при переопределении, модификатор доступа в родителе может быть шире чем в наследнике.
// Final  запрещает переопределение метода в наследниках.
// Privat закрывает работу переопределения.
package lection21;
class Animal{
    private void eat(){
        System.out.println("Animal eat");
    }
}
class Horse extends Animal{
    
    void eat(){
        System.out.println("Horse eat");
    }
}
class Shpaga extends Horse{
     @Override
     void eat(){
        System.out.println("Shpaga eat");
    }
}

public class Task01 {
    public static void main(String arg []){
        Horse a2 = new Shpaga();
        a2.eat();//!!!!!!! Демонстрация сути переопределения методов
    }
}
